import datetime
from typing import Any

from aiogram import Router, F, types

from cache import r
from utils.translator import translator as t

from routers.keyboards.works import works_menu_keyboard
from routers.keyboards import my_works as kb
from routers.messages import my_works as ms
from schemas.operations import OperationShow, OperationDetails

from database.orm import AsyncOrm

router = Router()


@router.callback_query(F.data.split("|")[1] == "works-records")
async def works_reports_menu(callback: types.CallbackQuery) -> None:
    """–ú–µ–Ω—é —É—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç"""
    tg_id = str(callback.from_user.id)
    lang = r.get(f"lang:{tg_id}").decode()

    text = "üìã " + await t.t("work_records", lang)

    keyboard = await works_menu_keyboard(lang)
    await callback.message.edit_text(text=text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.split("|")[1] == "my-works")
async def my_works_period(callback: types.CallbackQuery, tg_id: str) -> None:
    """–ú–æ–∏ —Ä–∞–±–æ—Ç—ã –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞"""
    lang = r.get(f"lang:{tg_id}").decode()

    text = await t.t("select_period", lang)
    keyboard = await kb.works_period_keyboard(lang)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.split("|")[0] == "my-works")
async def my_works_list(callback: types.CallbackQuery, tg_id: str, session: Any) -> None:
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    lang = r.get(f"lang:{tg_id}").decode()

    # –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º start/end –ø–µ—Ä–∏–æ–¥ –≤—ã–±–æ—Ä–∫–∏
    period = callback.data.split("|")[1]

    if period == "today":
        start_period = datetime.datetime.now().date()   # –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        end_period = datetime.datetime.now()

    elif period == "yesterday":
        start_period = (datetime.datetime.now() - datetime.timedelta(days=1)).date()
        end_period = datetime.datetime.strptime(start_period.strftime("%Y-%m-%d") + " 23:59:59", "%Y-%m-%d %H:%M:%S")

    elif period == "week":
        end_period = datetime.datetime.now()
        start_period = end_period - datetime.timedelta(days=7)

    elif period == "month":
        end_period = datetime.datetime.now()
        start_period = end_period - datetime.timedelta(days=30)  # —Å—Ç–∞–≤–∏–º –¥–ª—è –º–µ—Å—è—Ü–∞ 30 –¥–Ω–µ–π

    else:
        # TODO –∑–∞–≥–ª—É—à–∫–∞
        end_period = datetime.datetime.now()
        start_period = datetime.datetime.now()
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return

    # –ø–æ–ª—É—á–∞–µ–º Operations
    operations: list[OperationShow] = await AsyncOrm.select_operations(start_period, end_period, tg_id, session)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = await kb.works_my_works_list(lang, operations, period)

    # –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Ä–∞–±–æ—Ç
    if not operations:
        text = await t.t("empty_works", lang)
        await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
        return

    text = await t.t("works_list", lang)

    # TODO –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.split("|")[0] == "my-works-list")
async def work_detail(callback: types.CallbackQuery, tg_id: str, session: Any) -> None:
    """–í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    lang = r.get(f"lang:{tg_id}").decode()
    # –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–ª–±—ç–∫–∞ (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Å–¥–µ–ª–∞—Ç—å)
    period = callback.data.split("|")[2]

    operation_id = int(callback.data.split("|")[1])

    operation: OperationDetails = await AsyncOrm.select_operation(operation_id, session)

    message = await ms.work_detail_message(lang, operation)
    keyboard = await kb.work_details(lang, operation_id, period)

    await callback.message.edit_text(message, reply_markup=keyboard.as_markup())
