import datetime
from typing import Any

from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from cache import r
from utils.translator import translator as t
from utils.date_time_service import convert_date_time

from routers.keyboards.works import works_menu_keyboard
from routers.keyboards import my_works as kb
from routers.messages import my_works as ms
from routers.states.edit_work import EditWorkFSM

from schemas.operations import OperationJobs, OperationDetailJobs

from database.orm import AsyncOrm

router = Router()


@router.callback_query(F.data.split("|")[1] == "works-records")
async def works_reports_menu(callback: types.CallbackQuery) -> None:
    """–ú–µ–Ω—é —É—á–µ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç"""
    tg_id = str(callback.from_user.id)
    lang = r.get(f"lang:{tg_id}").decode()

    text = "üìã " + await t.t("work_records", lang)

    keyboard = await works_menu_keyboard(lang)
    await callback.message.edit_text(text=text, reply_markup=keyboard.as_markup())


# MY WORKS
@router.callback_query(F.data.split("|")[1] == "my-works")
async def my_works_period(callback: types.CallbackQuery, tg_id: str) -> None:
    """–ú–æ–∏ —Ä–∞–±–æ—Ç—ã –≤—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞"""
    lang = r.get(f"lang:{tg_id}").decode()

    text = await t.t("select_period", lang)
    keyboard = await kb.works_period_keyboard(lang)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.split("|")[0] == "my-works")
async def my_works_list(callback: types.CallbackQuery, tg_id: str, session: Any) -> None:
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
    lang = r.get(f"lang:{tg_id}").decode()

    # –ø–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º start/end –ø–µ—Ä–∏–æ–¥ –≤—ã–±–æ—Ä–∫–∏
    period = callback.data.split("|")[1]

    if period == "today":
        start_period = datetime.datetime.now().date()   # –¥–µ–ª–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏
        end_period = datetime.datetime.now()

    elif period == "yesterday":
        start_period = (datetime.datetime.now() - datetime.timedelta(days=1)).date()
        end_period = datetime.datetime.strptime(start_period.strftime("%Y-%m-%d") + " 23:59:59", "%Y-%m-%d %H:%M:%S")

    elif period == "week":
        end_period = datetime.datetime.now()
        start_period = end_period - datetime.timedelta(days=7)

    elif period == "month":
        end_period = datetime.datetime.now()
        start_period = end_period - datetime.timedelta(days=30)  # —Å—Ç–∞–≤–∏–º –¥–ª—è –º–µ—Å—è—Ü–∞ 30 –¥–Ω–µ–π

    else:
        # TODO –∑–∞–≥–ª—É—à–∫–∞
        end_period = datetime.datetime.now()
        start_period = datetime.datetime.now()
        await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        return

    # –ø–æ–ª—É—á–∞–µ–º operations —Å –∏—Ö jobs
    # TODO add cache
    operations: list[OperationJobs] = await AsyncOrm.select_operations(start_period, end_period, tg_id, session)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = await kb.works_my_works_list(lang, operations, period)

    # –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç —Ä–∞–±–æ—Ç
    if not operations:
        text = await t.t("empty_works", lang)
        await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
        return

    text = await t.t("works_list", lang)

    # TODO –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.split("|")[0] == "my-works-list")
async def work_detail(callback: types.CallbackQuery, tg_id: str, session: Any) -> None:
    """–í—ã–≤–æ–¥ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã"""
    lang = r.get(f"lang:{tg_id}").decode()
    # –ø–µ—Ä–∏–æ–¥ –ø–æ–ª—É—á–∞–µ–º –∏–∑ –∫–æ–ª–±—ç–∫–∞ (—á—Ç–æ–±—ã –ø–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—ã–ª–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —Å–¥–µ–ª–∞—Ç—å)
    period = callback.data.split("|")[2]

    operation_id = int(callback.data.split("|")[1])

    # TODO add cache
    operation: OperationDetailJobs = await AsyncOrm.select_operation(operation_id, session)

    message = await ms.work_detail_message(lang, operation)
    keyboard = await kb.work_details(lang, operation_id, period)

    await callback.message.edit_text(message, reply_markup=keyboard.as_markup())


# UPDATE WORK
@router.callback_query(F.data.split("|")[0] == "edit-work")
async def edit_my_work(callback: types.CallbackQuery, tg_id: str, session: Any, state: FSMContext) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    # —Å–∫–∏–¥—ã–≤–∞–µ–º state (–¥–ª—è —Å–ª—É—á–∞–µ–≤ –∫–æ–≥–¥–∞ –ø—Ä–∏—à–ª–∏ —Å –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥)
    try:
        await state.clear()
    except:
        pass

    lang = r.get(f"lang:{tg_id}").decode()
    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∫–Ω–æ–ø–æ–∫ "–Ω–∞–∑–∞–¥"
    operation_id = int(callback.data.split("|")[1])
    period = callback.data.split("|")[2]

    # –ø–æ–ª—É—á–∞–µ–º —Ä–∞–±–æ—Ç—É
    operation: OperationDetailJobs = await AsyncOrm.select_operation(operation_id, session)

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–≥–¥–∞ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞ —Ä–∞–±–æ—Ç–∞, –µ—Å–ª–∏ –±–æ–ª—å—à–µ —á–µ–º 24 —á–∞—Å–∞, —Ç–æ –∑–∞–ø—Ä–µ—â–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    if operation.created_at < datetime.datetime.now() - datetime.timedelta(hours=24):
        text = await t.t("work_24", lang)
        keyboard = await kb.back_keyboard(lang, period, operation_id)
        await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
        return

    # –Ω–∞—á–∏–Ω–∞–µ–º FSM –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    await state.set_state(EditWorkFSM.enter_comment)
    await state.update_data(period=period)
    await state.update_data(operation_id=operation_id)

    # –µ—Å–ª–∏ –µ—â–µ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ä–∞–±–æ—Ç—É
    text = await t.t("your_comment", lang) + "\n\n" + f"<i>{operation.comment}</i>" + "\n\n" \
           + await t.t("enter_new_comment", lang)
    keyboard = await kb.back_keyboard(lang, period, operation_id)

    prev_mess = await callback.message.edit_text(text, reply_markup=keyboard.as_markup())
    await state.update_data(prev_mess=prev_mess)


@router.message(EditWorkFSM.enter_comment)
async def editing_comment(message: types.Message, state: FSMContext, tg_id: str) -> None:
    """–ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ —Ç–µ–∫—Å—Ç–∞ """
    lang = r.get(f"lang:{tg_id}").decode()

    # –ø–æ–ª—É—á–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    try:
        new_comment = str(message.text)
    except:
        await message.answer("Wrong comment, try again")
        return

    # –º–µ–Ω—è–µ–º state
    await state.set_state(EditWorkFSM.confirm)
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –≤ data
    await state.update_data(new_comment=new_comment)

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–ª–±—ç–∫–æ–≤
    data = await state.get_data()

    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥. —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await data["prev_mess"].delete()
    except Exception:
        pass

    text = await t.t("your_new_comment", lang) + f"\n\n<i>{new_comment}</i>"
    keyboard = await kb.confirm_edit_comment_keyboard(lang, data["operation_id"], data["period"])
    await message.answer(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data == "save-changes-comment", EditWorkFSM.confirm)
async def save_new_comment(callback: types.CallbackQuery, state: FSMContext, tg_id: str, session: Any) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –∫–æ–Ω–µ—Ü FSM"""
    lang = r.get(f"lang:{tg_id}").decode()

    # –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    # –æ—á–∏—â–∞–µ–º state
    await state.clear()

    # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    waiting_message = await callback.message.edit_text(await t.t("please_wait", lang))

    # –∏–∑–º–µ–Ω—è–µ–º –≤ –ë–î
    await AsyncOrm.update_comment(data["operation_id"], data["new_comment"], session)

    await state.clear()

    text = await t.t("comment_saved", lang)
    keyboard = await kb.after_comment_updated_keyboard(lang)
    await waiting_message.edit_text(text, reply_markup=keyboard.as_markup())


# DELETE WORK
@router.callback_query(F.data.split("|")[0] == "delete-work")
async def delete_my_work(callback: types.CallbackQuery, tg_id: str, session: Any) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    lang = r.get(f"lang:{tg_id}").decode()
    operation_id = int(callback.data.split("|")[1])
    period = callback.data.split("|")[2]

    operation: OperationDetailJobs = await AsyncOrm.select_operation(operation_id, session)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
    created_at = convert_date_time(operation.created_at, True)[0]
    transport_category = await t.t(operation.transport_category, lang)
    job_title = await t.t(operation.job_title, lang)
    text = f"{created_at}|{operation.id}|{transport_category}|{operation.transport_subcategory}-{operation.serial_number}|{job_title}"

    # –¥–æ–±–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –æ–± —É–¥–∞–ª–µ–Ω–∏–∏
    text += "\n\n" + f"<b>{await t.t('sure_delete', lang)}</b>"
    keyboard = await kb.delete_work(lang, operation_id, period)

    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


@router.callback_query(F.data.split("|")[0] == "delete-work-confirm")
async def delete_my_work(callback: types.CallbackQuery, tg_id: str, session: Any) -> None:
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
    lang = r.get(f"lang:{tg_id}").decode()
    operation_id = int(callback.data.split("|")[1])

    # –∑–∞—â–∏—Ç–∞ –æ—Ç –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏–∑ –ë–î
    try:
        await AsyncOrm.delete_work(operation_id, session)
    except:
        await callback.message.edit_text("Error while deleting, try again later...")
        return

    # —É—Å–ø–µ—à–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
    text = await t.t("success_delete", lang)
    keyboard = await kb.after_comment_updated_keyboard(lang)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())

