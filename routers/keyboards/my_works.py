from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from routers.buttons import buttons as btn
from settings import settings
from utils.translator import translator as t
from utils.date_time_service import convert_date_time, get_days_in_month
from schemas.operations import OperationJobs


async def works_period_keyboard(lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–æ–∏—Ö —Ä–∞–±–æ—Ç"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('today', lang)}", callback_data="my-works|today"),
        InlineKeyboardButton(text=f"{await t.t('yesterday', lang)}", callback_data="my-works|yesterday"),
        InlineKeyboardButton(text=f"{await t.t('week', lang)}", callback_data="my-works|week"),
    )
    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('month', lang)}", callback_data="my-works|month"),
        InlineKeyboardButton(text=f"{await t.t('custom_period', lang)}", callback_data="my-works|custom-period")
    )

    back_button: tuple = await btn.get_back_button("menu|works-records", lang)
    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )
    return keyboard


async def select_custom_date(year: int, month: int, lang: str,
                             dates_data: dict, end_date: bool = None) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    keyboard = InlineKeyboardBuilder()

    # –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –≤ –º–µ—Å—è—Ü–µ –¥–∞—Ç–∞–º–∏
    month_days = get_days_in_month(year, month)

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    header = f"üóìÔ∏è {settings.calendar_months[lang][month]} {year}"
    keyboard.add(InlineKeyboardButton(text=header, callback_data="ignore"))

    # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.row(*[InlineKeyboardButton(text=day, callback_data='ignore') for day in week_days])

    buttons = []

    # –æ—Ç—Å—Ç—É–ø –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –≤ –º–µ—Å—è—Ü–µ
    buttons += [InlineKeyboardButton(text=" ", callback_data="ignore")] * (month_days[0].weekday())

    # –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
    for d in month_days:
        # –µ—Å–ª–∏ –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–π –¥–∞—Ç—ã
        if end_date:
            callback = f"w_clndr|custom|{d.day}.{d.month}.{d.year}"

        # –µ—Å–ª–∏ –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã
        else:
            callback = f"works_end_date|{d.day}.{d.month}.{d.year}"

        buttons.append(InlineKeyboardButton(text=str(d.day), callback_data=f'{callback}'))

    # –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è
    buttons += [InlineKeyboardButton(text=" ", callback_data="ignore")] * (6 - month_days[-1].weekday())

    # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ 7 —à—Ç—É–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(buttons), 7):
        keyboard.row(*buttons[i:i + 7])

    # –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    prev_month_name = settings.calendar_months[lang][dates_data["prev_month"]]
    next_month_name = settings.calendar_months[lang][dates_data["next_month"]]
    keyboard.row(
        InlineKeyboardButton(text=f"<< {prev_month_name} {dates_data['prev_year']}",
                             callback_data=f"w_action|{dates_data['prev_month']}|{dates_data['prev_year']}"),
        InlineKeyboardButton(text=f"{next_month_name} {dates_data['next_year']} >>",
                             callback_data=f"w_action|{dates_data['next_month']}|{dates_data['next_year']}")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button("works|my-works", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard


async def works_my_works_list(lang: str, works: list[OperationJobs], period: str) -> InlineKeyboardBuilder:
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ä–∞–±–æ—Ç –≤ –∫–Ω–æ–ø–∫–∞—Ö"""
    keyboard = InlineKeyboardBuilder()

    for w in works:
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å –ø–µ—Ä–µ–≤–æ–¥–æ–º
        date, time = convert_date_time(w.created_at, True)
        transport_category = await t.t(w.transport_category, lang)
        jobtype_title = await t.t(w.jobtype_title, lang)

        # –≤ callback –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–∏–æ–¥, —á—Ç–æ–±—ã –≤ —Å–ª–µ–¥. —Ö—ç–Ω–¥–ª–µ—Ä–µ –º–æ–∂–Ω–æ –±—ã–ª–æ –µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∫–Ω–æ–ø–∫–µ –Ω–∞–∑–∞–¥
        keyboard.row(
            InlineKeyboardButton(
                text=f"{date} {time} | ID {w.id} | {transport_category} | {w.transport_subcategory}-{w.serial_number} | {jobtype_title}",
                callback_data=f"my-works-list|{w.id}|{period}"
            )
        )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button("works|my-works", lang)
    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )
    return keyboard


async def work_details(lang: str, operation_id: int, period: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–≤–æ–¥–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ —Ä–∞–±–æ—Ç—É"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=await t.t("edit", lang), callback_data=f"edit-work|{operation_id}|{period}"),
    )
    keyboard.row(
        InlineKeyboardButton(text=await t.t("delete", lang), callback_data=f"delete-work|{operation_id}|{period}")
    )

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    # back_button: tuple = await btn.get_back_button(f"back-from-works-list-custom|{period}", lang)
    # keyboard.row(
    #     InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    # )
    # –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.row(
        InlineKeyboardButton(text=await t.t("main_menu", lang), callback_data="menu|works-records")
    )

    return keyboard


async def back_keyboard(lang: str, period: str, operation_id: int) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥ –∫–æ–≥–¥–∞ —É–∂–µ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É"""
    keyboard = InlineKeyboardBuilder()

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"my-works-list|{operation_id}|{period}", lang)
    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )

    return keyboard


async def confirm_edit_comment_keyboard(lang: str, operation_id: int, period: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥ –∫–æ–≥–¥–∞ —É–∂–µ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–∞–±–æ—Ç—É"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=await t.t("save_changes", lang), callback_data="save-changes-comment")
    )

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"my-works-list|{operation_id}|{period}", lang)
    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )

    return keyboard


async def after_comment_updated_keyboard(lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text=f"üóÇ {await t.t('my_works', lang)}", callback_data="works|my-works"))
    keyboard.row(InlineKeyboardButton(text=await t.t("main_menu", lang), callback_data="main-menu"))

    return keyboard


async def delete_work(lang: str, operation_id: int, period: str) -> InlineKeyboardBuilder:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–±–æ—Ç—É"""
    keyboard = InlineKeyboardBuilder()

    # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"my-works-list|{operation_id}|{period}", lang)

    keyboard.row(
        InlineKeyboardButton(text=await t.t("yes", lang), callback_data=f"delete-work-confirm|{operation_id}"),
        InlineKeyboardButton(text=await t.t("no", lang), callback_data=back_button[1]),
    )

    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )
    return keyboard
