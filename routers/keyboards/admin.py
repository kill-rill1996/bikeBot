import calendar
from typing import List

from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from routers.buttons import buttons as btn
from schemas.categories_and_jobs import Subcategory, Jobtype, Category
from schemas.location import Location
from schemas.transport import TransportSubcategory
from schemas.users import User
from settings import settings
from utils.date_time_service import get_days_in_month
from utils.translator import translator as t


async def admin_menu_keyboard(lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text=f"üìë {await t.t('reports', lang)}", callback_data="admin|reports"))
    keyboard.row(InlineKeyboardButton(text=f"üöó {await t.t('vehicle_management', lang)}", callback_data="admin|vehicle_management"))
    keyboard.row(InlineKeyboardButton(text=f"üåé {await t.t('location_management', lang)}", callback_data="admin|location_management"))
    keyboard.row(InlineKeyboardButton(text=f"üõ† {await t.t('operation_management', lang)}", callback_data="admin|operation_management"))
    keyboard.row(InlineKeyboardButton(text=f"üë§ {await t.t('user_management', lang)}", callback_data="admin|user_management"))
    keyboard.row(InlineKeyboardButton(text=f"üóëÔ∏è {await t.t('delete_work', lang)}", callback_data="admin|delete_work"))

    back_button: tuple = await btn.get_back_button("main-menu", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard


async def reports_menu_keyboard(lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(InlineKeyboardButton(text=f"üìÜ {await t.t('individual_mechanic_report', lang)}", callback_data="admin-reports|individual_mechanic_report"))
    keyboard.row(InlineKeyboardButton(text=f"üìÜ {await t.t('summary_report_by_mechanics', lang)}", callback_data="admin-reports|summary_report_by_mechanics"))
    keyboard.row(InlineKeyboardButton(text=f"üìÜ {await t.t('vehicle_report', lang)}", callback_data="admin-reports|vehicle_report"))
    keyboard.row(InlineKeyboardButton(text=f"üìÜ {await t.t('work_categories_report', lang)}", callback_data="admin-reports|work_categories_report"))
    keyboard.row(InlineKeyboardButton(text=f"üìÜ {await t.t('inefficiency_report', lang)}", callback_data="admin-reports|inefficiency_report"))
    keyboard.row(InlineKeyboardButton(text=f"üìÜ {await t.t('location_report', lang)}", callback_data="admin-reports|location_report"))

    back_button: tuple = await btn.get_back_button("menu|admin", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard


async def select_period_keyboard(report_type: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç—á–µ—Ç–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('today', lang)}", callback_data=f"reports-period|{report_type}|today"),
        InlineKeyboardButton(text=f"{await t.t('yesterday', lang)}", callback_data=f"reports-period|{report_type}|yesterday"),
        InlineKeyboardButton(text=f"{await t.t('week', lang)}", callback_data=f"reports-period|{report_type}|week"),
    )
    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('month', lang)}", callback_data=f"reports-period|{report_type}|month"),
        InlineKeyboardButton(text=f"{await t.t('custom_period', lang)}", callback_data=f"reports-period|{report_type}|custom")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button("admin|reports", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))
    return keyboard


async def select_custom_date(report_type: str, year: int, month: int, lang: str,
                             dates_data: dict, end_date: bool = None) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    keyboard = InlineKeyboardBuilder()

    # –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –≤ –º–µ—Å—è—Ü–µ –¥–∞—Ç–∞–º–∏
    month_days = get_days_in_month(year, month)

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    header = f"üóìÔ∏è {settings.calendar_months[lang][month]} {year}"
    keyboard.add(InlineKeyboardButton(text=header, callback_data="ignore"))

    # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.row(*[InlineKeyboardButton(text=day, callback_data='ignore') for day in week_days])

    buttons = []

    # –æ—Ç—Å—Ç—É–ø –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –≤ –º–µ—Å—è—Ü–µ
    buttons += [InlineKeyboardButton(text=" ", callback_data="ignore")] * (month_days[0].weekday())

    # –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
    for d in month_days:
        # –µ—Å–ª–∏ –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–π –¥–∞—Ç—ã
        if end_date:
            callback = f"clndr|{report_type}|custom|{d.day}.{d.month}.{d.year}"

        # –µ—Å–ª–∏ –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã
        else:
            callback = f"select_end_date|{report_type}|{d.day}.{d.month}.{d.year}"

        buttons.append(InlineKeyboardButton(text=str(d.day), callback_data=f'{callback}'))

    # –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è
    buttons += [InlineKeyboardButton(text=" ", callback_data="ignore")] * (6 - month_days[-1].weekday())

    # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ 7 —à—Ç—É–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(buttons), 7):
        keyboard.row(*buttons[i:i + 7])

    # –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    prev_month_name = settings.calendar_months[lang][dates_data["prev_month"]]
    next_month_name = settings.calendar_months[lang][dates_data["next_month"]]
    keyboard.row(
        InlineKeyboardButton(text=f"<< {prev_month_name} {dates_data['prev_year']}",
                             callback_data=f"action|{report_type}|{dates_data['prev_month']}|{dates_data['prev_year']}"),
        InlineKeyboardButton(text=f"{next_month_name} {dates_data['next_year']} >>",
                             callback_data=f"action|{report_type}|{dates_data['next_month']}|{dates_data['next_year']}")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard


async def choose_mechanic(mechanics: List[User], report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Ö–∞–Ω–∏–∫–∞"""
    keyboard = InlineKeyboardBuilder()

    for mechanic in mechanics:
        keyboard.row(InlineKeyboardButton(text=mechanic.username, callback_data=f"mechanic|{period}|{mechanic.id}"))

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def back_to_mechanic(period: str, report_type: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–µ—Ö–∞–Ω–∏–∫–∞"""
    keyboard = InlineKeyboardBuilder()

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"reports-period|{report_type}|{period}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard


async def back_to_location(period: str, report_type: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è"""
    keyboard = InlineKeyboardBuilder()

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"reports-period|{report_type}|{period}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard


async def select_vehicle_report_type(report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä –æ—Ç—á–µ—Ç –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('by_category', lang)}", callback_data=f"vehicle_report_type|by_category|{report_type}|{period}"),
        InlineKeyboardButton(text=f"{await t.t('by_subcategory', lang)}", callback_data=f"vehicle_report_type|by_subcategory|{report_type}|{period}")
    )
    keyboard.row(InlineKeyboardButton(text=f"{await t.t('by_transport', lang)}", callback_data=f"vehicle_report_type|by_transport|{report_type}|{period}"))

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def select_vehicle_subcategory(subcategories: List[Subcategory], report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
    keyboard = InlineKeyboardBuilder()

    for sc in subcategories:
        keyboard.row(InlineKeyboardButton(text=sc.title, callback_data=f"vehicle_report_by_sc|{report_type}|{period}|{sc.id}"))

    keyboard.adjust(3)

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"reports-period|{report_type}|{period}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def select_vehicle_category(categories: List[Category], report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É"""
    keyboard = InlineKeyboardBuilder()

    for c in categories:
        emoji = c.emoji + " " if c.emoji else ""
        keyboard.row(InlineKeyboardButton(text=emoji + await t.t(c.title, lang), callback_data=f"vehicle_report_by_c|{report_type}|{period}|{c.id}"))

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"reports-period|{report_type}|{period}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def select_category_for_jobtypes_report(categories: List[Category], report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ jobtypes"""
    keyboard = InlineKeyboardBuilder()

    for c in categories:
        emoji = c.emoji + " " if c.emoji else ""
        keyboard.row(InlineKeyboardButton(text=emoji + await t.t(c.title, lang), callback_data=f"jobtypes_report_category|{report_type}|{period}|{c.id}"))

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def select_category_for_transport_report(categories: List[Category], report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    keyboard = InlineKeyboardBuilder()

    for c in categories:
        emoji = c.emoji + " " if c.emoji else ""
        keyboard.row(InlineKeyboardButton(text=emoji + await t.t(c.title, lang), callback_data=f"transport_report_category|{report_type}|{period}|{c.id}"))

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"reports-period|{report_type}|{period}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def select_subcategory_for_transport_report(subcategories: List[Subcategory], report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–í—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ —Å–µ—Ä–∏–π–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    keyboard = InlineKeyboardBuilder()

    for sc in subcategories:
        keyboard.row(InlineKeyboardButton(text=sc.title, callback_data=f"transport_report_subcategory|{report_type}|{period}|{sc.id}"))

    keyboard.adjust(3)

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"vehicle_report_type|by_transport|{report_type}|{period}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def back_to(report_sub_type: str, period: str, report_type: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞"""
    keyboard = InlineKeyboardBuilder()

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"vehicle_report_type|{report_sub_type}|{report_type}|{period}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard


async def transport_pagination_keyboard(transports: List[TransportSubcategory], page: int, report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    keyboard = InlineKeyboardBuilder()

    # pagination
    nums_on_page = 24
    pages = get_page_nums(len(transports), nums_on_page)

    # –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Å –ø–µ—Ä–≤–æ–π –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é
    if page == 0:
        page = pages

    # –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞ –ø–µ—Ä–≤—É—é
    if page > pages:
        page = 1

    start = (page - 1) * nums_on_page
    end = page * nums_on_page
    page_transports = transports[start:end]

    for transport in page_transports:
        text = f"{transport.subcategory_title}-{transport.serial_number}"

        keyboard.row(InlineKeyboardButton(text=text, callback_data=f"vehicle_report_by_t|{report_type}|{period}|{transport.id}"))

    keyboard.adjust(4)

    # pages
    if len(transports) > nums_on_page:
        keyboard.row(
            InlineKeyboardButton(text=f"<", callback_data=f"prev|{page}|{report_type}|{period}"),
            InlineKeyboardButton(text=f"{page}/{pages}", callback_data="pages"),
            InlineKeyboardButton(text=f">", callback_data=f"next|{page}|{report_type}|{period}")
        )

    # –Ω–∞–∑–∞–¥
    category_id = transports[0].category_id
    back_button: tuple = await btn.get_back_button(f"transport_report_category|{report_type}|{period}|{category_id}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def select_jobtypes(jobtypes: List[Jobtype], selected: List[int], report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º—É–ª—å—Ç–∏–≤—ã–±–æ—Ä–∞ jobtypes"""
    keyboard = InlineKeyboardBuilder()

    for jt in jobtypes:
        emoji = jt.emoji + " " if jt.emoji else ""
        text = emoji + await t.t(jt.title, lang)

        # –ø–æ–º–µ—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ
        if jt.id in selected:
            text = "‚úì " + text

        keyboard.row(InlineKeyboardButton(text=text, callback_data=f"jobtypes_select|{jt.id}|{report_type}|{period}"))

    if len(selected) != 0:
        keyboard.row(InlineKeyboardButton(text=f"‚úÖ {await t.t('done', lang)}", callback_data=f"jobtype_select_done|{report_type}|{period}"))

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"reports-period|{report_type}|{period}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def select_location(locations: List[Location], report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ª–æ–∫–∞—Ü–∏–∏"""
    keyboard = InlineKeyboardBuilder()

    for location in locations:
        keyboard.row(InlineKeyboardButton(text=await t.t(location.name, lang), callback_data=f"select_location|{report_type}|{period}|{location.id}"))

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def back_to_choose_period(report_type: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞ –ø–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    keyboard = InlineKeyboardBuilder()

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard


async def mechanic_report_details_keyboard(period: str, report_type: str, user_id: int, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –º–µ—Ö–∞–Ω–∏–∫–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('excel_export', lang)}", callback_data=f"excel_export|{report_type}|{period}|{user_id}"),
        InlineKeyboardButton(text=f"{await t.t('graphic', lang)}", callback_data=f"graphic-mechanic|{period}|{user_id}")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"reports-period|{report_type}|{period}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def summary_report_details_keyboard(report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('excel_export', lang)}", callback_data=f"excel_export|{report_type}|{period}"),
        InlineKeyboardButton(text=f"{await t.t('graphic', lang)}", callback_data=f"graphic-mechanics|{period}")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def vehicle_report_details_keyboard(back_to: str, period: str, report_type: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –ø–µ—Ä–∏–æ–¥–∞"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('excel_export', lang)}", callback_data=f"excel_export|{report_type}|{period}"),
        InlineKeyboardButton(text=f"{await t.t('graphic', lang)}", callback_data=f"graphic-transport|{period}")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(back_to, lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def jobtypes_report_details_keyboard(report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É jobtypes"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('excel_export', lang)}", callback_data=f"excel_export|{report_type}|{period}"),
        InlineKeyboardButton(text=f"{await t.t('graphic', lang)}", callback_data=f"graphic-jobtypes|{period}")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def efficient_report_details_keyboard(report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        # TODO –ø–æ–ø—Ä–∞–≤–∏—Ç—å
        InlineKeyboardButton(text=f"{await t.t('excel_export', lang)}", callback_data=f"excel_export|{report_type}|{period}"),
        InlineKeyboardButton(text=f"{await t.t('graphic', lang)}", callback_data=f"graphic")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def location_report_details_keyboard(report_type: str, period: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('excel_export', lang)}", callback_data=f"excel_export|{report_type}|{period}"),
        InlineKeyboardButton(text=f"{await t.t('graphic', lang)}", callback_data=f"graphic-location|{period}")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"admin-reports|{report_type}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


async def excel_ready_keyboard(back_callback: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    keyboard = InlineKeyboardBuilder()

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"{back_callback}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    # –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    main_menu_button: tuple = await btn.get_main_menu_button(lang)
    keyboard.row(InlineKeyboardButton(text=main_menu_button[0], callback_data=main_menu_button[1]))

    return keyboard


def get_page_nums(items: int, nums_on_page: int) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü"""
    pages = items // nums_on_page

    if items - pages * nums_on_page != 0:
        pages += 1

    return pages


async def back_keyboard(back_callback: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardBuilder()

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"{back_callback}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard