from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from routers.buttons import buttons as btn
from schemas.search import TransportNumber, OperationJobsUserLocation
from utils.translator import translator as t
from utils.date_time_service import convert_date_time, get_days_in_month
from settings import settings


async def back_keyboard(lang: str, callback_data: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardBuilder()

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(callback_data, lang)
    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )

    return keyboard


async def transport_jobs_keyboard(lang: str, transports: list[TransportNumber]) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–≤–æ–¥–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–≤ –∏ —Ä–∞–±–æ—Ç"""
    keyboard = InlineKeyboardBuilder()

    # –∫–Ω–æ–ø–∫–∏ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º
    for transport in transports:
        keyboard.row(
            InlineKeyboardButton(
                text=f"{transport.subcategory_title}-{transport.serial_number}",
                callback_data=f"searched_transport|{transport.id}"
            )
        )
    keyboard.adjust(3)

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button("works|search-vehicle", lang)
    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )

    return keyboard


async def transport_period_keyboard(lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –º–æ–∏—Ö —Ä–∞–±–æ—Ç"""
    keyboard = InlineKeyboardBuilder()

    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('today', lang)}", callback_data="search_period|today"),
        InlineKeyboardButton(text=f"{await t.t('yesterday', lang)}", callback_data="search_period|yesterday"),
        InlineKeyboardButton(text=f"{await t.t('week', lang)}", callback_data="search_period|week"),
    )
    keyboard.row(
        InlineKeyboardButton(text=f"{await t.t('month', lang)}", callback_data="search_period|month"),
        InlineKeyboardButton(text=f"{await t.t('custom_period', lang)}", callback_data="search_period|custom-period")
    )

    back_button: tuple = await btn.get_back_button("works|search-vehicle", lang)
    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )
    return keyboard


async def found_operations_keyboard(
        operations: [OperationJobsUserLocation], lang: str, callback_data: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞–∑–∞–¥"""
    keyboard = InlineKeyboardBuilder()

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π –∫–Ω–æ–ø–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ date: ID|category|subcat-sn
    for operation in operations:
        date = convert_date_time(operation.created_at, True)[0]
        text = f"{date}: {operation.id} | {await t.t(operation.category_title, lang)} | " \
               f"{operation.subcategory_title}-{operation.serial_number}"
        keyboard.row(
            InlineKeyboardButton(text=text, callback_data=f"operation-detail|{operation.id}"),
        )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(callback_data, lang)
    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )

    return keyboard


async def back_and_main_menu_keyboard(callback_data: str, lang: str) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –Ω–∞–∑–∞–¥"""

    keyboard = InlineKeyboardBuilder()

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(callback_data, lang)
    keyboard.row(
        InlineKeyboardButton(text=back_button[0], callback_data=back_button[1])
    )

    # –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    keyboard.row(
        InlineKeyboardButton(text=await t.t("main_menu", lang), callback_data="main-menu")
    )

    return keyboard


async def select_custom_date(year: int, month: int, lang: str,
                             dates_data: dict, transport_id: int, end_date: bool = None) -> InlineKeyboardBuilder:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    keyboard = InlineKeyboardBuilder()

    # –ø–æ–ª—É—á–∞–µ–º –¥–Ω–∏ –≤ –º–µ—Å—è—Ü–µ –¥–∞—Ç–∞–º–∏
    month_days = get_days_in_month(year, month)

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    header = f"üóìÔ∏è {settings.calendar_months[lang][month]} {year}"
    keyboard.add(InlineKeyboardButton(text=header, callback_data="ignore"))

    # –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
    week_days = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    keyboard.row(*[InlineKeyboardButton(text=day, callback_data='ignore') for day in week_days])

    buttons = []

    # –æ—Ç—Å—Ç—É–ø –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –¥–Ω—è –≤ –º–µ—Å—è—Ü–µ
    buttons += [InlineKeyboardButton(text=" ", callback_data="ignore")] * (month_days[0].weekday())

    # –∫–Ω–æ–ø–∫–∏ –ø–æ –¥–Ω—è–º –º–µ—Å—è—Ü–∞
    for d in month_days:
        # –µ—Å–ª–∏ –≤—ã–±–æ—Ä –≤—Ç–æ—Ä–æ–π –¥–∞—Ç—ã
        if end_date:
            callback = f"se_clndr|custom|{d.day}.{d.month}.{d.year}"

        # –µ—Å–ª–∏ –≤—ã–±–æ—Ä –ø–µ—Ä–≤–æ–π –¥–∞—Ç—ã
        else:
            callback = f"search_end_date|{d.day}.{d.month}.{d.year}"

        buttons.append(InlineKeyboardButton(text=str(d.day), callback_data=f'{callback}'))

    # –æ—Ç—Å—Ç—É–ø –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è
    buttons += [InlineKeyboardButton(text=" ", callback_data="ignore")] * (6 - month_days[-1].weekday())

    # —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ 7 —à—Ç—É–∫ –≤ —Å—Ç—Ä–æ–∫–µ
    for i in range(0, len(buttons), 7):
        keyboard.row(*buttons[i:i + 7])

    # –∫–Ω–æ–ø–∫–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ –º–µ—Å—è—Ü–∞ –∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ
    prev_month_name = settings.calendar_months[lang][dates_data["prev_month"]]
    next_month_name = settings.calendar_months[lang][dates_data["next_month"]]
    keyboard.row(
        InlineKeyboardButton(text=f"<< {prev_month_name} {dates_data['prev_year']}",
                             callback_data=f"se_action|{dates_data['prev_month']}|{dates_data['prev_year']}"),
        InlineKeyboardButton(text=f"{next_month_name} {dates_data['next_year']} >>",
                             callback_data=f"se_action|{dates_data['next_month']}|{dates_data['next_year']}")
    )

    # –Ω–∞–∑–∞–¥
    back_button: tuple = await btn.get_back_button(f"searched_transport|{transport_id}", lang)
    keyboard.row(InlineKeyboardButton(text=back_button[0], callback_data=back_button[1]))

    return keyboard