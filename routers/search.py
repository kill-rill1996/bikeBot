import difflib
from typing import Any


from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext

from cache import r
from schemas.categories_and_jobs import TransportNumber, JobTitle
from schemas.operations import OperationJobsTransport
from utils.translator import translator as t

from routers.keyboards import search as kb
from routers.states.search import SearchWorkFSM

from database.orm import AsyncOrm

router = Router()


@router.callback_query(F.data.split("|")[1] == "search-vehicle")
async def search_vehicles_menu(callback: types.CallbackQuery, tg_id: str, state: FSMContext) -> None:
    """–ú–µ–Ω—é –ø–æ–∏—Å–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ —Å—Ç–∞—Ä—Ç FSM"""
    lang = r.get(f"lang:{tg_id}").decode()

    # –Ω–∞—á–∞–ª–æ FSM
    await state.set_state(SearchWorkFSM.enter_search_data)

    text = "üîç " + await t.t("vehicle_history", lang) + "\n"
    message = text + await t.t("enter_transport_number", lang) + ":"

    keyboard = await kb.back_keyboard(lang, "menu|works-records")
    prev_message = await callback.message.edit_text(text=message, reply_markup=keyboard.as_markup())
    await state.update_data(prev_message=prev_message)


@router.message(SearchWorkFSM.enter_search_data)
# –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
@router.callback_query(SearchWorkFSM.period, F.data == "back_from_search_result")
async def get_data_to_search(message: types.Message | types.CallbackQuery, tg_id: str, state: FSMContext, session: Any) -> None:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    lang = r.get(f"lang:{tg_id}").decode()

    # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∂–∏–¥–∞–Ω–∏–∏
    if type(message) == types.Message:
        wait_message = await message.answer(await t.t("please_wait", lang))
    else:
        wait_message = await message.message.edit_text(await t.t("please_wait", lang))

    # –º–µ–Ω—è–µ–º state
    await state.set_state(SearchWorkFSM.select_transport)

    data = await state.get_data()

    # —É–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await data["prev_message"].delete()
    except Exception:
        pass

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞—Ä–∞–Ω–µ–µ
    keyboard = await kb.back_keyboard(lang, "works|search-vehicle")

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä—è–º–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞
    if type(message) == types.Message:
        # –µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–µ —Ç–µ–∫—Å—Ç
        if not message.text:
            # —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            text = await t.t("wrong_text_data", lang)
            await wait_message.edit_text(text, reply_markup=keyboard.as_markup())
            return

    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤–µ—Å—å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    db_transports = await AsyncOrm.get_all_transports(session)

    # –ø–æ–ª—É—á–∞–µ–º –∏–∑ –ë–î –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–æ–º –∏ —Ä–∞–±–æ—Ç–∞–º–∏
    operations: list[OperationJobsTransport] = await AsyncOrm.select_operations_with_jobs(session)

    # –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if type(message) == types.Message:
        text_from_message = message.text
        await state.update_data(text_from_message=text_from_message)

    # –µ—Å–ª–∏ –ø—Ä–∏—à–ª–∏ —Å callback –±–µ—Ä–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ state
    else:
        text_from_message = data["text_from_message"]

    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    similar_transports = await get_match_transport_or_job(text_from_message, db_transports, operations, lang)

    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    await state.update_data(similar_transports=similar_transports)

    # –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç
    if not similar_transports:
        # —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç
        text = await t.t("empty_search", lang)
        await wait_message.edit_text(text, reply_markup=keyboard.as_markup())
        return

    # –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –µ—Å—Ç—å
    else:
        transports_for_keyboard: list[TransportNumber] = []
        # –ø–æ–ª—É—á–∞–µ–º —Å–æ–≤–ø–∞–≤—à–∏–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ë–î
        for transport in db_transports:
            if f"{transport.subcategory_title}-{transport.serial_number}" in similar_transports:
                transports_for_keyboard.append(transport)

    keyboard = await kb.transport_jobs_keyboard(lang, transports_for_keyboard)
    text = await t.t("select_found_vehicle", lang)
    await wait_message.edit_text(text, reply_markup=keyboard.as_markup())


@router.callback_query(SearchWorkFSM.select_transport, F.data.split("|")[0] == "searched_transport")
async def select_transport(callback: types.CallbackQuery, tg_id: str, state: FSMContext) -> None:
    """–í—ã–±–æ—Ä –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞–±–æ—Ç"""
    lang = r.get(f"lang:{tg_id}").decode()

    await state.set_state(SearchWorkFSM.period)

    transport_id: str = callback.data.split("|")[1]
    await state.update_data(transport_id=transport_id)

    text = await t.t("select_period", lang)
    keyboard = await kb.transport_period_keyboard(lang)
    await callback.message.edit_text(text, reply_markup=keyboard.as_markup())


async def get_match_transport_or_job(
        input_data: str, transports: list[TransportNumber], operations: [OperationJobsTransport], lang: str
) -> list[str]:
    """–ü–∞—Ä—Å–∏—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –ø–æ–∏—Å–∫–∞"""
    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞
    transport_names = [f"{transport.subcategory_title}-{transport.serial_number}" for transport in transports]

    # –ø–µ—Ä–µ–≤–æ–¥–∏–º —Ä–∞–±–æ—Ç—ã –≤ –Ω—É–∂–Ω—ã–π —è–∑—ã–∫
    translated_jobs = {op.id: await t.t(op.job_title, lang) for op in operations}

    transports: list[str] = []  # –ø–æ–ª–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å–æ–≤–ø–∞–≤—à–∏—Ö —Ä–∞–±–æ—Ç U-12, SS-1 ...

    # –µ—Å–ª–∏ –≤ —Ç–µ–∫—Å—Ç–µ –µ—Å—Ç—å —Ü–∏—Ñ—Ä–∞, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –Ω–∞ —Ä–∞–±–æ—Ç—ã –∏ –Ω–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
    if any(char.isdigit() for char in input_data):
        # –¥–µ–ª–∏–º –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
        input_data_split = input_data.split(" ")

        for word in input_data_split:

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤ –Ω–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–º—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É
            transports.extend(difflib.get_close_matches(word, transport_names, n=2, cutoff=0.3))

    # –µ—Å–ª–∏ —Ü–∏—Ñ—Ä –Ω–µ—Ç, —Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–∞–±–æ—Ç—ã
    else:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º jobs
        matches_titles = difflib.get_close_matches(input_data, translated_jobs.values(), n=2)
        for key, value in translated_jobs.items():
            if value in matches_titles:
                for op in operations:
                    if op.id == key:
                        transports.append(f"{op.transport_subcategory}-{op.serial_number}")
                        break

    return transports





