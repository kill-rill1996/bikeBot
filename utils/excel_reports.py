import datetime
import os
from typing import Any, List

from openpyxl.styles import Font, PatternFill, Border, Side, Alignment

from database.orm import AsyncOrm
from schemas.categories_and_jobs import Subcategory, Category, Jobtype
from schemas.location import Location
from schemas.reports import OperationWithJobs
from schemas.search import TransportNumber
from schemas.users import User
from utils.date_time_service import convert_date_time
from utils.translator import translator as t
import pandas as pd


async def individual_mechanic_excel_report(operations: list[OperationWithJobs], mechanic_username: str,
                                           start_date: datetime.datetime, end_date: datetime.datetime,
                                           report_type: str, lang: str, session: Any) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è excel –æ—Ç—á–µ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "mechanic_report"
    title = f"üìÜ {await t.t(report_type, lang)} {start_date} - {end_date} {mechanic_username}"

    data = []
    max_len_a = 2
    max_len_b = 4
    max_len_c = 9
    max_len_d = 12
    max_len_e = 6
    max_len_f = 23
    max_len_g = 7
    max_len_h = 11

    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('excel_transport', lang),
        await t.t('excel_jobtype', lang),
        await t.t('excel_jobs', lang),
        await t.t('excel_avg_time', lang),
        await t.t('location', lang),
        await t.t('excel_comment', lang)
    ]
    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for operation in operations:
        for job in operation.jobs:
            location = await AsyncOrm.get_location_by_id(operation.location_id, session)
            row_data = [
                    # ID
                    f"{operation.id}",
                    # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    f"{convert_date_time(operation.created_at, with_tz=True)[0]} {convert_date_time(operation.created_at, with_tz=True)[1]}",
                    # —Ç—Ä–∞—Å–ø–æ—Ä—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –Ω–æ–º–µ—Ä–æ–º
                    f"{await t.t(operation.transport_category, lang)} {operation.transport_subcategory}-{operation.transport_serial_number}",
                    # –≥—Ä—É–ø–ø–∞ —É–∑–ª–æ–≤
                    f"{await t.t(operation.jobs[0].jobtype_title, lang)}",
                    # —Ä–∞–±–æ—Ç—ã
                    f"{await t.t(job.title, lang)}",
                    # —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–±–æ—Ç—É
                    f"{round(operation.duration / len(operation.jobs))}",
                    # –ª–æ–∫–∞—Ü–∏—è
                    f"{await t.t(location.name, lang)}",
                    # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    f"{operation.comment if operation.comment else '-'}"
                ]
            data.append(row_data)

            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
            if len(row_data[0]) > max_len_a:
                max_len_a = len(row_data[0])

            if len(row_data[1]) > max_len_b:
                max_len_b = len(row_data[1])

            if len(row_data[2]) > max_len_c:
                max_len_c = len(row_data[2])

            if len(row_data[3]) > max_len_d:
                max_len_d = len(row_data[3])

            if len(row_data[4]) > max_len_e:
                max_len_e = len(row_data[4])

            if len(row_data[5]) > max_len_f:
                max_len_f = len(row_data[5])

            if len(row_data[6]) > max_len_g:
                max_len_g = len(row_data[6])

            if len(row_data[7]) > max_len_h:
                max_len_h = len(row_data[7])

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    data.append(["", "", "", "", "", "", ""])

    jobs_count = sum([len(operation.jobs) for operation in operations])
    duration_sum = str(sum([operation.duration for operation in operations]))
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
    data.append([f"{await t.t('number_of_works', lang)}", "", "", f"{jobs_count}"])
    # –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
    data.append([f"{await t.t('excel_avg_time', lang)}:", "", "", f"{round(int(duration_sum)/jobs_count)} {await t.t('minutes', lang)}"])
    # –æ–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–±–æ—Ç—ã
    data.append([f"{await t.t('total_time_spent', lang)}", "", "", f"{duration_sum} {await t.t('minutes', lang)}"])

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = max_len_a + 2
        worksheet.column_dimensions['B'].width = max_len_b
        worksheet.column_dimensions['C'].width = max_len_c
        worksheet.column_dimensions['D'].width = max_len_d
        worksheet.column_dimensions['E'].width = max_len_e + 2
        worksheet.column_dimensions['F'].width = max_len_f + 2
        worksheet.column_dimensions['G'].width = max_len_g + 2
        worksheet.column_dimensions['H'].width = 40

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:H1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(
            left=Side(style=BORDER_STYLE_MEDIUM),
            right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM),
            bottom=Side(style=BORDER_STYLE_MEDIUM)
        )
        for i in range(8):
            column_cell = worksheet.cell(row=1, column=i + 1)
            column_cell.border = Border(
                left=Side(style=BORDER_STYLE_MEDIUM),
                right=Side(style=BORDER_STYLE_MEDIUM),
                top=Side(style=BORDER_STYLE_MEDIUM),
                bottom=Side(style=BORDER_STYLE_MEDIUM)
            )

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(8):
            column_cell = worksheet.cell(row=2, column=i+1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(
                left=Side(style=BORDER_STYLE_THIN),
                right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN)
            )

        # –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        start_row = 3
        end_row = jobs_count
        for i in range(start_row, end_row):
            column_cell = worksheet.cell(row=i, column=8)
            column_cell.alignment = Alignment(wrap_text=True)

        # –æ–±—ä–µ–¥–µ–Ω–∏—è–º —Å—Ç–æ–ª–±—Ü—ã —É —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å–ª–µ —Ç–∞–±–ª–∏—Ü—ã
        row_number = jobs_count + 3
        for i in range(1, 4):
            worksheet.merge_cells(f'A{row_number + i}:C{row_number + i}')

    return excel_path


async def summary_mechanics_excel_report(start_date: datetime.datetime, end_date: datetime.datetime, report_type: str, lang: str,
                                         session: Any) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è excel –æ—Ç—á–µ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date_str = convert_date_time(start_date, with_tz=True)[0]
    end_date_str = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date_str}_{end_date_str}.xlsx"
    sheet_name = "summary_mechanics_report"
    title = f"üìÜ {await t.t(report_type, lang)} {start_date_str} - {end_date_str}"

    data = []

    columns = [
        await t.t('mechanic', lang),
        await t.t('works_count', lang),
        await t.t('works_time', lang),
        await t.t('avg_works', lang),
    ]

    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    mechanics = await AsyncOrm.get_all_mechanics(session)

    works_count_rating = {}

    for idx, mechanic in enumerate(mechanics, start=1):
        row = list()

        row.append(mechanic.username)

        operations = await AsyncOrm.get_operations_for_user_by_period(mechanic.tg_id, start_date, end_date, session)

        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
        jobs_count = sum([len(operation.jobs) for operation in operations])
        row.append(f"{jobs_count}")

        # –æ–±—â–µ–µ –∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        duration_sum = sum([operation.duration for operation in operations])
        if jobs_count != 0:
            avg_time = round(int(duration_sum) / jobs_count)
        else:
            avg_time = 0
        row.append(f"{duration_sum}")
        row.append(f"{avg_time}")

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ—á–∫—É –≤ –æ–±—â–∏–π
        data.append(row)

        # –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        works_count_rating[mechanic.username] = jobs_count

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    data.append(["", "", "", ""])

    # —Ä–µ–π—Ç–∏–Ω–≥ –º–µ—Ö–∞–Ω–∏–∫–æ–≤
    data.append([f"{await t.t('rating_works', lang)}", "", ""])

    sorted_mechanics = {k: v for k, v in sorted(works_count_rating.items(), key=lambda item: item[1], reverse=True)}
    for k, v in sorted_mechanics.items():
        data.append([f"{k}", f"{v}"])

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 20
        worksheet.column_dimensions['B'].width = 40
        worksheet.column_dimensions['C'].width = 25
        worksheet.column_dimensions['D'].width = 25

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:D1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(4):
            column_cell = worksheet.cell(row=2, column=i + 1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN))

    return excel_path


async def vehicle_report_by_transport_excel_report(
        operations: List[OperationWithJobs],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        report_subtype: str,
        lang: str,
        session: Any,
        transport: TransportNumber) -> str:

    """–û—Ç—á–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "vehicle_report"

    title = f"üìÜ {await t.t(report_type, lang)} {start_date} - {end_date} {await t.t(report_subtype, lang)} {transport.subcategory_title}-{transport.serial_number}"

    data = []
    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('mechanic', lang),
        await t.t('location', lang),
        await t.t('works_time', lang),
        await t.t('excel_comment', lang),
        await t.t('excel_jobtype', lang),
        await t.t('excel_jobs', lang)
    ]
    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for operation in operations:
        mechanic = await AsyncOrm.get_user_by_tg_id(operation.tg_id, session)
        location = await AsyncOrm.get_location_by_id(operation.location_id, session)

        for job in operation.jobs:
            date, time = convert_date_time(operation.created_at, with_tz=True)
            data.append(
                [
                    # ID
                    f"{operation.id}",
                    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    f"{date} {time}",
                    # –ú–µ—Ö–∞–Ω–∏–∫
                    f"{mechanic.username}",
                    # –õ–æ–∫–∞—Ü–∏—è
                    f"{await t.t(location.name, lang)}",
                    # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç
                    f"{operation.duration}",
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    f"{operation.comment if operation.comment else '-'}",
                    # –ì—Ä—É–ø–ø–∞ —É–∑–ª–æ–≤
                    f"{await t.t(job.jobtype_title, lang)}",
                    # —Ä–∞–±–æ—Ç–∞
                    f"{await t.t(job.title, lang)}"
                ]
            )

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 10
        worksheet.column_dimensions['B'].width = 20
        worksheet.column_dimensions['C'].width = 20
        worksheet.column_dimensions['D'].width = 25
        worksheet.column_dimensions['E'].width = 25
        worksheet.column_dimensions['F'].width = 45
        worksheet.column_dimensions['G'].width = 35
        worksheet.column_dimensions['H'].width = 35

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:H1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(8):
            column_cell = worksheet.cell(row=2, column=i + 1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN))

    return excel_path


async def vehicle_report_by_subcategory_excel_report(
        operations: List[OperationWithJobs],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        report_subtype: str,
        lang: str,
        session: Any,
        subcategory: Subcategory) -> str:

    """–û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "vehicle_report"

    title = f"üìÜ {await t.t(report_type, lang)} {start_date} - {end_date} {await t.t(report_subtype, lang)} {subcategory.title}"

    data = []
    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('excel_transport', lang),
        await t.t('mechanic', lang),
        await t.t('location', lang),
        await t.t('works_time', lang),
        await t.t('excel_comment', lang),
        await t.t('excel_jobtype', lang),
        await t.t('excel_jobs', lang)
    ]
    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for operation in operations:
        mechanic = await AsyncOrm.get_user_by_tg_id(operation.tg_id, session)
        location = await AsyncOrm.get_location_by_id(operation.location_id, session)

        for job in operation.jobs:
            date, time = convert_date_time(operation.created_at, with_tz=True)
            data.append(
                [
                    # ID
                    f"{operation.id}",
                    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    f"{date} {time}",
                    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                    f"{operation.transport_subcategory}-{operation.transport_serial_number}",
                    # –ú–µ—Ö–∞–Ω–∏–∫
                    f"{mechanic.username}",
                    # –õ–æ–∫–∞—Ü–∏—è
                    f"{await t.t(location.name, lang)}",
                    # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç
                    f"{operation.duration}",
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    f"{operation.comment if operation.comment else '-'}",
                    # –ì—Ä—É–ø–ø–∞ —É–∑–ª–æ–≤
                    f"{await t.t(job.jobtype_title, lang)}",
                    # —Ä–∞–±–æ—Ç–∞
                    f"{await t.t(job.title, lang)}"
                ]
            )

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 10
        worksheet.column_dimensions['B'].width = 20
        worksheet.column_dimensions['C'].width = 15
        worksheet.column_dimensions['D'].width = 20
        worksheet.column_dimensions['E'].width = 20
        worksheet.column_dimensions['F'].width = 30
        worksheet.column_dimensions['G'].width = 35
        worksheet.column_dimensions['H'].width = 35
        worksheet.column_dimensions['I'].width = 35

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:I1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(9):
            column_cell = worksheet.cell(row=2, column=i + 1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN))

    return excel_path


async def vehicle_report_by_category_excel_report(
        operations: List[OperationWithJobs],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        report_subtype: str,
        lang: str,
        session: Any,
        category_title: str) -> str:

    """–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "vehicle_report"

    title = f"üìÜ {await t.t(report_type, lang)} {start_date} - {end_date} {await t.t(report_subtype, lang)} {await t.t(category_title, lang)}"

    data = []
    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('excel_transport', lang),
        await t.t('mechanic', lang),
        await t.t('location', lang),
        await t.t('works_time', lang),
        await t.t('excel_comment', lang),
        await t.t('excel_jobtype', lang),
        await t.t('excel_jobs', lang)
    ]
    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for operation in operations:
        mechanic = await AsyncOrm.get_user_by_tg_id(operation.tg_id, session)
        location = await AsyncOrm.get_location_by_id(operation.location_id, session)

        for job in operation.jobs:
            date, time = convert_date_time(operation.created_at, with_tz=True)
            data.append(
                [
                    # ID
                    f"{operation.id}",
                    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    f"{date} {time}",
                    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                    f"{operation.transport_subcategory}-{operation.transport_serial_number}",
                    # –ú–µ—Ö–∞–Ω–∏–∫
                    f"{mechanic.username}",
                    # –õ–æ–∫–∞—Ü–∏—è
                    f"{await t.t(location.name, lang)}",
                    # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç
                    f"{operation.duration}",
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    f"{operation.comment if operation.comment else '-'}",
                    # –ì—Ä—É–ø–ø–∞ —É–∑–ª–æ–≤
                    f"{await t.t(job.jobtype_title, lang)}",
                    # —Ä–∞–±–æ—Ç–∞
                    f"{await t.t(job.title, lang)}"
                ]
            )

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 10
        worksheet.column_dimensions['B'].width = 20
        worksheet.column_dimensions['C'].width = 15
        worksheet.column_dimensions['D'].width = 20
        worksheet.column_dimensions['E'].width = 20
        worksheet.column_dimensions['F'].width = 30
        worksheet.column_dimensions['G'].width = 35
        worksheet.column_dimensions['H'].width = 35
        worksheet.column_dimensions['I'].width = 35

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:I1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(9):
            column_cell = worksheet.cell(row=2, column=i + 1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN))

    return excel_path


async def categories_work_excel_report(
        jobtypes: List[Jobtype],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        lang: str,
        session: Any) -> str:

    """–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞–±–æ—Ç"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    converted_start_date = convert_date_time(start_date, with_tz=True)[0]
    converted_end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{converted_start_date}_{converted_end_date}.xlsx"
    sheet_name = "work_categories_report"

    title = f"üìÜ {await t.t(report_type, lang)} {converted_start_date} - {converted_end_date}"

    data = []
    rows_to_merge = []
    rows_counter = 1
    headers_rows = []

    for idx, jt in enumerate(jobtypes, start=1):
        # –∑–∞–≥–æ–ª–æ–≤–æ–∫ jobtype
        emoji = jt.emoji + " " if jt.emoji else ""
        jobtype_header = f"{emoji}{await t.t(jt.title, lang)}\n"

        data.append([jobtype_header[:-1], ""])
        rows_counter += 1
        rows_to_merge.append(rows_counter)
        headers_rows.append(rows_counter)

        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        jobs = await AsyncOrm.get_jobs_by_jobtype_with_operation(jt.id, start_date, end_date, session)

        # –µ—Å–ª–∏ —Ä–∞–±–æ—Ç –Ω–µ—Ç
        if len(jobs) == 0:
            text = await t.t("no_works", lang)
            data.append([text])
            rows_counter += 1
            continue

        jobs_count = {}
        transport_count = {}
        mechanic_count = {}
        for job in jobs:
            if jobs_count.get(job.job_title):
                jobs_count[job.job_title] += 1
            else:
                jobs_count[job.job_title] = 1

            transport = f"{job.subcategory_title}-{job.serial_number}"
            if transport_count.get(transport):
                transport_count[transport] += 1
            else:
                transport_count[transport] = 1

            if mechanic_count.get(job.mechanic_username):
                mechanic_count[job.mechanic_username] += 1
            else:
                mechanic_count[job.mechanic_username] = 1

        # —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–±–æ—Ç –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
        sorted_jobs = {k: v for k, v in sorted(jobs_count.items(), key=lambda item: item[1], reverse=True)}
        sorted_transport = {k: v for k, v in sorted(transport_count.items(), key=lambda item: item[1], reverse=True)}
        sorted_mechanics = {k: v for k, v in sorted(mechanic_count.items(), key=lambda item: item[1], reverse=True)}

        for k, v in sorted_jobs.items():
            data.append([
                f"{await t.t(k, lang)}",
                f"{v}"
            ])
            rows_counter += 1

        # —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
        most_often_transport_header = await t.t('most_recent_transport', lang)
        data.append([most_often_transport_header[:-1], ""])
        rows_counter += 1
        rows_to_merge.append(rows_counter)

        counter = 0
        for k, v in sorted_transport.items():
            if counter == 3:
                break

            data.append([
                f"{k}",
                f"{v}"
            ])
            counter += 1
            rows_counter += 1

        # —Å–∞–º—ã–µ —á–∞—Å—Ç—ã–µ –º–µ—Ö–∞–Ω–∏–∫–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        most_often_mechanics_header = await t.t('most_recent_mechanics', lang)
        data.append([most_often_mechanics_header[:-1], ""])
        rows_counter += 1
        rows_to_merge.append(rows_counter)

        counter = 0
        for k, v in sorted_mechanics.items():
            if counter == 3:
                break

            data.append([
                f"{k}",
                f"{v}"
            ])
            counter += 1
            rows_counter += 1

        # —Å—Ç—Ä–æ–∫–∞ –ø–æ—Å–ª–µ jobtype
        data.append(["", ""])
        rows_counter += 1

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 35
        worksheet.column_dimensions['B'].width = 35

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:B1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
                                   top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # —Å—Ç–∏–ª–∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for row in rows_to_merge:
            column_cell = worksheet.cell(row=row, column=1)

            # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —è—á–µ–µ–∫
            worksheet.merge_cells(f'A{row}:B{row}')
            # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            # –∂–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç
            column_cell.font = Font(bold=True)

        # —Å—Ç–∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for row in headers_rows:
            column_cell_1 = worksheet.cell(row=row, column=1)
            column_cell_2 = worksheet.cell(row=row, column=2)

            # –∂–µ–ª—Ç—ã–π —Ü–≤–µ—Ç
            column_cell_1.fill = PatternFill(start_color=COLOR_LIGHT_YELLOW, end_color=COLOR_LIGHT_YELLOW,
                                           fill_type="solid")
            # –≥—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–Ω–∫–∞—è —É –¥–≤—É—Ö —è—á–µ–µ–∫
            column_cell_1.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                                        top=Side(style=BORDER_STYLE_THIN), bottom=Side(style=BORDER_STYLE_THIN))
            column_cell_2.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                                        top=Side(style=BORDER_STYLE_THIN), bottom=Side(style=BORDER_STYLE_THIN))

    return excel_path


async def locations_excel_report(
        operations: List[OperationWithJobs],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        lang: str,
        location: Location) -> str:

    """–û—Ç—á–µ—Ç –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "location_report"

    title = f"üìÜ {await t.t(report_type, lang)} {await t.t(location.name, lang)} {start_date} - {end_date}"

    data = []
    columns = [
        await t.t('excel_transport', lang),
        await t.t('excel_date', lang),
    ]
    data.append(columns)

    # —Å—Ç—Ä–æ–∫–∏ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–º –Ω–∞–¥–æ –±—É–¥–µ—Ç –æ–±—ä–µ–¥–µ–Ω–∏—Ç—å –∫–∞–∫ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏ (—Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—ã–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏)
    rows_for_merge = [3, 4]
    # —Å—Ä–∞–∑—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–∏—Ç—É–ª, —à–∞–ø–∫—É —Ç–∞–±–ª–∏—Ü—ã, –ø–µ—Ä–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
    rows_counter = 4

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data.append([
        f"{await t.t(operations[0].transport_category, lang)}",
        ""
    ])

    # –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    data.append([
        f"{await t.t('subcategory', lang)} {operations[0].transport_subcategory}",
        ""
    ])

    # –¥–ª—è —É—á–µ—Ç–∞ —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
    unique_transport = {}
    current_category = operations[0].transport_category
    current_subcategory = operations[0].transport_subcategory
    category_counter = 0
    subcategory_counter = 0
    total_counter = 0

    for idx, operation in enumerate(operations, start=1):
        if unique_transport.get(f"{operation.transport_subcategory}-{operation.transport_serial_number}"):
            continue
        else:
            # —á—Ç–æ–±—ã –Ω–µ –ø–æ–≤—Ç–æ—Ä—è–ª—Å—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç –∏–∑ –æ–ø–µ—Ä–∞—Ü–∏–π
            key = f"{operation.transport_subcategory}-{operation.transport_serial_number}"
            unique_transport[key] = True

            # —Å–º–µ–Ω–∞ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
            if operation.transport_subcategory != current_subcategory:
                # —Å–º–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
                if operation.transport_category != current_category:
                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    data.append([
                        f'{await t.t("total", lang)} {current_subcategory}',
                        f'{subcategory_counter} {await t.t("items", lang)}'
                    ])

                    data.append([
                        f'{await t.t("total", lang)} {await t.t(current_category, lang)}',
                        f'{category_counter} {await t.t("items", lang)}'
                    ])

                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    data.append([
                        f"{await t.t(operation.transport_category, lang)}",
                        ""
                    ])

                    # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–µ—Ä–∂–µ —Å—Ç—Ä–æ–∫
                    rows_counter += 3
                    rows_for_merge.append(rows_counter)

                    data.append([
                        f"{await t.t('subcategory', lang)} {operation.transport_subcategory}",
                        "",
                    ])

                    # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–µ—Ä–∂–µ —Å—Ç—Ä–æ–∫
                    rows_counter += 1
                    rows_for_merge.append(rows_counter)

                    # –º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    current_category = operation.transport_category
                    current_subcategory = operation.transport_subcategory
                    category_counter = 0
                    subcategory_counter = 0

                # –±–µ–∑ —Å–º–µ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                else:
                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    data.append([
                        f'{await t.t("total", lang)} {current_subcategory}',
                        f'{subcategory_counter} {await t.t("items", lang)}'
                    ])

                    # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–æ–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
                    data.append([
                        f"{await t.t('subcategory', lang)} {operation.transport_subcategory}",
                        ""
                    ])

                    # –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –º–µ—Ä–∂–µ —Å—Ç—Ä–æ–∫
                    rows_counter += 1
                    rows_for_merge.append(rows_counter)

                    # –º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—é
                    current_subcategory = operation.transport_subcategory
                    subcategory_counter = 0

            date, time = convert_date_time(operation.created_at, with_tz=True)
            # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
            data.append([
                f"{operation.transport_subcategory}-{operation.transport_serial_number}",
                f"{date} {time}"
            ])
            category_counter += 1
            subcategory_counter += 1
            total_counter += 1

            # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å—Ç—Ä–æ–∫
            rows_counter += 1

    # –∑–∞–ø–∏—Å—å –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫
    data.append([
        f'{await t.t("total", lang)} {current_subcategory}',
        f'{subcategory_counter} {await t.t("items", lang)}'
    ])

    data.append([
        f'{await t.t("total", lang)} {await t.t(current_category, lang)}',
        f'{category_counter} {await t.t("items", lang)}'
    ])

    # –∑–∞–ø–∏—Å—å —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
    data.append([
        f'{await t.t("total_on_warehouse", lang)}',
        f'{total_counter} {await t.t("items", lang)}'
    ])

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 35
        worksheet.column_dimensions['B'].width = 35

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:B1')

        # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for row in rows_for_merge:
            worksheet.merge_cells(f'A{row}:B{row}')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
                                   top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(2):
            column_cell = worksheet.cell(row=2, column=i + 1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                                        bottom=Side(style=BORDER_STYLE_THIN))

        # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for n in rows_for_merge:
            column_cell = worksheet.cell(row=n, column=1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

    return excel_path


async def inefficiency_excel_report(
        operations: List[OperationWithJobs],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        lang: str,
        period: str) -> str:
    """–û—Ç—á–µ—Ç –ø–æ –Ω–µ—ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    converted_start_date = convert_date_time(start_date, with_tz=True)[0]
    converted_end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{converted_start_date}_{converted_end_date}.xlsx"
    sheet_name = "inefficiency_report"

    title = f"üìÜ {await t.t(report_type, lang)} {converted_start_date} - {converted_end_date}"

    data = []
    rows_for_merge = [2]
    rows_counter = 2
    rows_headers = []

    # –ø–µ—Ä–≤—ã–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    text = await t.t('repeatable_jobs', lang)

    data.append([
        f"{text[:-1]}",
        "",
        ""
    ])

    # –∫–æ–ª–æ–Ω–∫–∏ –ø–µ—Ä–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
    columns = [
        await t.t("excel_transport", lang),
        await t.t("excel_jobs", lang),
        await t.t("excel_count", lang)
    ]
    data.append(columns)
    rows_counter += 1
    rows_headers.append(rows_counter)

    transport_jobs_count = {}
    for o in operations:
        for job in o.jobs:
            key = f"{o.transport_subcategory}-{o.transport_serial_number} {await t.t(job.title, lang)}"

            if transport_jobs_count.get(key):
                transport_jobs_count[key] += 1
            else:
                transport_jobs_count[key] = 1

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
    sorted_jobs = {k: v for k, v in sorted(transport_jobs_count.items(), key=lambda item: item[1], reverse=True)}

    # —É—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–±–æ—Ç—ã –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Ç–æ–ª—å–∫–æ –±–æ–ª—å—à–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–∞–∑ –∑–∞ –ø–µ—Ä–∏–æ–¥
    if period == "today" or period == "yesterday":
        frequent_works = 2
    elif period == "week":
        frequent_works = 7
    elif period == "month":
        frequent_works = 15
    else:
        frequent_works = (end_date - start_date).days

    for k, v in sorted_jobs.items():
        if v >= frequent_works:
            transport = k.split(" ")[0]
            job_title = " ".join(k.split(" ")[1:])
            data.append([
                f"{transport}",
                f"{job_title}",
                f"{v}"
            ])
            rows_counter += 1

    # –æ—Ç–¥–µ–ª–∏—Ç–µ–ª—å –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
    data.append(["", "", ""])
    rows_counter += 1

    # –≤—Ç–æ—Ä–æ–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫
    text = await t.t('no_comments', lang)
    data.append([
        f"{text[:-1]}",
        "",
        ""
    ])
    rows_counter += 1
    rows_for_merge.append(rows_counter)

    # –∫–æ–ª–æ–Ω–∫–∏
    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('excel_transport', lang),
    ]
    data.append(columns)
    rows_counter += 1
    rows_headers.append(rows_counter)

    # –æ–ø–µ—Ä–∞—Ü–∏–∏ –±–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
    for o in operations:
        if not o.comment:
            date, time = convert_date_time(o.created_at, with_tz=True)
            data.append([
                f"{o.id}",
                f"{date} {time}",
                f"{o.transport_subcategory}-{o.transport_serial_number}"
            ])

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 25
        worksheet.column_dimensions['B'].width = 30
        worksheet.column_dimensions['C'].width = 25

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:C1')

        # –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        for row in rows_for_merge:
            worksheet.merge_cells(f'A{row}:C{row}')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
                                   top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        for i in rows_headers:
            for c in range(3):
                column_cell = worksheet.cell(row=i, column=c+1)
                column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∏
        for n in rows_for_merge:
            column_cell = worksheet.cell(row=n, column=1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

    return excel_path