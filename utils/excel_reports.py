import datetime
import os
from typing import Any, List

from openpyxl.styles import Font, PatternFill, Border, Side, Alignment

from database.orm import AsyncOrm
from schemas.categories_and_jobs import Subcategory, Category, Jobtype
from schemas.reports import OperationWithJobs
from schemas.search import TransportNumber
from schemas.users import User
from utils.date_time_service import convert_date_time
from utils.translator import translator as t
import pandas as pd


async def individual_mechanic_excel_report(operations: list[OperationWithJobs], mechanic_username: str,
                                           start_date: datetime.datetime, end_date: datetime.datetime,
                                           report_type: str, lang: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è excel –æ—Ç—á–µ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "mechanic_report"
    title = f"üìÜ {await t.t(report_type, lang)} {start_date} - {end_date} {mechanic_username}"

    data = []

    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('excel_transport', lang),
        await t.t('excel_jobtype', lang),
        await t.t('excel_jobs', lang),
        await t.t('excel_comment', lang),
        await t.t('excel_avg_time', lang)
    ]
    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for operation in operations:
        for job in operation.jobs:
            data.append(
                [
                    # ID
                    f"{operation.id}",
                    # –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    f"{convert_date_time(operation.created_at, with_tz=True)[0]} {convert_date_time(operation.created_at, with_tz=True)[1]}",
                    # —Ç—Ä–∞—Å–ø–æ—Ä—Ç —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π –∏ –Ω–æ–º–µ—Ä–æ–º
                    f"{await t.t(operation.transport_category, lang)} {operation.transport_subcategory}-{operation.transport_serial_number}",
                    # –≥—Ä—É–ø–ø–∞ —É–∑–ª–æ–≤
                    f"{await t.t(operation.jobs[0].jobtype_title, lang)}",
                    # —Ä–∞–±–æ—Ç—ã
                    f"{await t.t(job.title, lang)}",
                    # –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    f"{operation.comment if operation.comment else '-'}",
                    # —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–±–æ—Ç—É
                    f"{round(operation.duration / len(operation.jobs))}"
                ]
            )

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    data.append(["", "", "", "", "", "", ""])

    jobs_count = sum([len(operation.jobs) for operation in operations])
    duration_sum = str(sum([operation.duration for operation in operations]))
    # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
    data.append([f"{await t.t('number_of_works', lang)}", "", f"{jobs_count}"])
    # –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
    data.append([f"{await t.t('excel_avg_time', lang)}", "", f"{round(int(duration_sum)/jobs_count)} {await t.t('minutes', lang)}"])
    # –æ–±—â–µ–µ –≤—Ä–µ–º—è –Ω–∞ —Ä–∞–±–æ—Ç—ã
    data.append([f"{await t.t('total_time_spent', lang)}", "", f"{duration_sum} {await t.t('minutes', lang)}"])

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 15
        worksheet.column_dimensions['B'].width = 20
        worksheet.column_dimensions['C'].width = 15
        worksheet.column_dimensions['D'].width = 25
        worksheet.column_dimensions['E'].width = 35
        worksheet.column_dimensions['F'].width = 45
        worksheet.column_dimensions['G'].width = 40

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:G1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(
            left=Side(style=BORDER_STYLE_MEDIUM),
            right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM),
            bottom=Side(style=BORDER_STYLE_MEDIUM)
        )

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(7):
            column_cell = worksheet.cell(row=2, column=i+1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(
                left=Side(style=BORDER_STYLE_THIN),
                right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN)
            )

    return excel_path


async def summary_mechanics_excel_report(start_date: datetime.datetime, end_date: datetime.datetime, report_type: str, lang: str,
                                         session: Any) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è excel –æ—Ç—á–µ—Ç–∞. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date_str = convert_date_time(start_date, with_tz=True)[0]
    end_date_str = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date_str}_{end_date_str}.xlsx"
    sheet_name = "summary_mechanics_report"
    title = f"üìÜ {await t.t(report_type, lang)} {start_date_str} - {end_date_str}"

    data = []

    columns = [
        await t.t('mechanic', lang),
        await t.t('works_count', lang),
        await t.t('works_time', lang),
        await t.t('avg_works', lang),
    ]

    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    mechanics = await AsyncOrm.get_all_mechanics(session)

    works_count_rating = {}

    for idx, mechanic in enumerate(mechanics, start=1):
        row = list()

        row.append(mechanic.username)

        operations = await AsyncOrm.get_operations_for_user_by_period(mechanic.tg_id, start_date, end_date, session)

        # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç
        jobs_count = sum([len(operation.jobs) for operation in operations])
        row.append(f"{jobs_count}")

        # –æ–±—â–µ–µ –∏ —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è
        duration_sum = sum([operation.duration for operation in operations])
        if jobs_count != 0:
            avg_time = round(int(duration_sum) / jobs_count)
        else:
            avg_time = 0
        row.append(f"{duration_sum}")
        row.append(f"{avg_time}")

        # –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç—Ä–æ—á–∫—É –≤ –æ–±—â–∏–π
        data.append(row)

        # –∑–∞–ø–∏—Å—å –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        works_count_rating[mechanic.username] = jobs_count

    # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –º–µ–∂–¥—É —Ä–∞–∑–¥–µ–ª–∞–º–∏
    data.append(["", "", "", ""])

    # —Ä–µ–π—Ç–∏–Ω–≥ –º–µ—Ö–∞–Ω–∏–∫–æ–≤
    data.append([f"{await t.t('rating_works', lang)}", "", ""])

    sorted_mechanics = {k: v for k, v in sorted(works_count_rating.items(), key=lambda item: item[1], reverse=True)}
    for k, v in sorted_mechanics.items():
        data.append([f"{k}", f"{v}"])

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 20
        worksheet.column_dimensions['B'].width = 40
        worksheet.column_dimensions['C'].width = 25
        worksheet.column_dimensions['D'].width = 25

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:D1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(4):
            column_cell = worksheet.cell(row=2, column=i + 1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN))

    return excel_path


async def vehicle_report_by_transport_excel_report(
        operations: List[OperationWithJobs],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        report_subtype: str,
        lang: str,
        session: Any,
        transport: TransportNumber) -> str:

    """–û—Ç—á–µ—Ç –ø–æ –Ω–æ–º–µ—Ä—É —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "vehicle_report"

    title = f"üìÜ {await t.t(report_type, lang)} {start_date} - {end_date} {await t.t(report_subtype, lang)} {transport.subcategory_title}-{transport.serial_number}"

    data = []
    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('mechanic', lang),
        await t.t('location', lang),
        await t.t('works_time', lang),
        await t.t('excel_comment', lang),
        await t.t('excel_jobtype', lang),
        await t.t('excel_jobs', lang)
    ]
    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for operation in operations:
        mechanic = await AsyncOrm.get_user_by_tg_id(operation.tg_id, session)
        location = await AsyncOrm.get_location_by_id(operation.location_id, session)

        for job in operation.jobs:
            date, time = convert_date_time(operation.created_at, with_tz=True)
            data.append(
                [
                    # ID
                    f"{operation.id}",
                    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    f"{date} {time}",
                    # –ú–µ—Ö–∞–Ω–∏–∫
                    f"{mechanic.username}",
                    # –õ–æ–∫–∞—Ü–∏—è
                    f"{await t.t(location.name, lang)}",
                    # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç
                    f"{operation.duration}",
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    f"{operation.comment if operation.comment else '-'}",
                    # –ì—Ä—É–ø–ø–∞ —É–∑–ª–æ–≤
                    f"{await t.t(job.jobtype_title, lang)}",
                    # —Ä–∞–±–æ—Ç–∞
                    f"{await t.t(job.title, lang)}"
                ]
            )

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 10
        worksheet.column_dimensions['B'].width = 20
        worksheet.column_dimensions['C'].width = 20
        worksheet.column_dimensions['D'].width = 25
        worksheet.column_dimensions['E'].width = 25
        worksheet.column_dimensions['F'].width = 45
        worksheet.column_dimensions['G'].width = 35
        worksheet.column_dimensions['H'].width = 35

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:H1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(8):
            column_cell = worksheet.cell(row=2, column=i + 1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN))

    return excel_path


async def vehicle_report_by_subcategory_excel_report(
        operations: List[OperationWithJobs],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        report_subtype: str,
        lang: str,
        session: Any,
        subcategory: Subcategory) -> str:

    """–û—Ç—á–µ—Ç –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "vehicle_report"

    title = f"üìÜ {await t.t(report_type, lang)} {start_date} - {end_date} {await t.t(report_subtype, lang)} {subcategory.title}"

    data = []
    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('excel_transport', lang),
        await t.t('mechanic', lang),
        await t.t('location', lang),
        await t.t('works_time', lang),
        await t.t('excel_comment', lang),
        await t.t('excel_jobtype', lang),
        await t.t('excel_jobs', lang)
    ]
    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for operation in operations:
        mechanic = await AsyncOrm.get_user_by_tg_id(operation.tg_id, session)
        location = await AsyncOrm.get_location_by_id(operation.location_id, session)

        for job in operation.jobs:
            date, time = convert_date_time(operation.created_at, with_tz=True)
            data.append(
                [
                    # ID
                    f"{operation.id}",
                    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    f"{date} {time}",
                    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                    f"{operation.transport_subcategory}-{operation.transport_serial_number}",
                    # –ú–µ—Ö–∞–Ω–∏–∫
                    f"{mechanic.username}",
                    # –õ–æ–∫–∞—Ü–∏—è
                    f"{await t.t(location.name, lang)}",
                    # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç
                    f"{operation.duration}",
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    f"{operation.comment if operation.comment else '-'}",
                    # –ì—Ä—É–ø–ø–∞ —É–∑–ª–æ–≤
                    f"{await t.t(job.jobtype_title, lang)}",
                    # —Ä–∞–±–æ—Ç–∞
                    f"{await t.t(job.title, lang)}"
                ]
            )

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 10
        worksheet.column_dimensions['B'].width = 20
        worksheet.column_dimensions['C'].width = 15
        worksheet.column_dimensions['D'].width = 20
        worksheet.column_dimensions['E'].width = 20
        worksheet.column_dimensions['F'].width = 30
        worksheet.column_dimensions['G'].width = 35
        worksheet.column_dimensions['H'].width = 35
        worksheet.column_dimensions['I'].width = 35

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:I1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(9):
            column_cell = worksheet.cell(row=2, column=i + 1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN))

    return excel_path


async def vehicle_report_by_category_excel_report(
        operations: List[OperationWithJobs],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        report_subtype: str,
        lang: str,
        session: Any,
        category_title: str) -> str:

    """–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "vehicle_report"

    title = f"üìÜ {await t.t(report_type, lang)} {start_date} - {end_date} {await t.t(report_subtype, lang)} {await t.t(category_title, lang)}"

    data = []
    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('excel_transport', lang),
        await t.t('mechanic', lang),
        await t.t('location', lang),
        await t.t('works_time', lang),
        await t.t('excel_comment', lang),
        await t.t('excel_jobtype', lang),
        await t.t('excel_jobs', lang)
    ]
    data.append(columns)

    # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    for operation in operations:
        mechanic = await AsyncOrm.get_user_by_tg_id(operation.tg_id, session)
        location = await AsyncOrm.get_location_by_id(operation.location_id, session)

        for job in operation.jobs:
            date, time = convert_date_time(operation.created_at, with_tz=True)
            data.append(
                [
                    # ID
                    f"{operation.id}",
                    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
                    f"{date} {time}",
                    # –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç
                    f"{operation.transport_subcategory}-{operation.transport_serial_number}",
                    # –ú–µ—Ö–∞–Ω–∏–∫
                    f"{mechanic.username}",
                    # –õ–æ–∫–∞—Ü–∏—è
                    f"{await t.t(location.name, lang)}",
                    # –°—É–º–º–∞—Ä–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç
                    f"{operation.duration}",
                    # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    f"{operation.comment if operation.comment else '-'}",
                    # –ì—Ä—É–ø–ø–∞ —É–∑–ª–æ–≤
                    f"{await t.t(job.jobtype_title, lang)}",
                    # —Ä–∞–±–æ—Ç–∞
                    f"{await t.t(job.title, lang)}"
                ]
            )

    # –°–æ–∑–¥–∞–µ–º DataFrame —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
    df = pd.DataFrame(data)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ Excel
    with pd.ExcelWriter(excel_path, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name=sheet_name, index=False)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        workbook = writer.book
        worksheet = writer.sheets[sheet_name]

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet.column_dimensions['A'].width = 10
        worksheet.column_dimensions['B'].width = 20
        worksheet.column_dimensions['C'].width = 15
        worksheet.column_dimensions['D'].width = 20
        worksheet.column_dimensions['E'].width = 20
        worksheet.column_dimensions['F'].width = 30
        worksheet.column_dimensions['G'].width = 35
        worksheet.column_dimensions['H'].width = 35
        worksheet.column_dimensions['I'].width = 35

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –æ—Ç—á–µ—Ç–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        title_cell = worksheet.cell(row=1, column=1)
        title_cell.value = title
        title_cell.font = Font(bold=True, size=14, color=COLOR_DARK_BLUE)  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç

        # –æ–±—ä–µ–¥–∏–Ω—è–µ–º –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        worksheet.merge_cells('A1:I1')

        # –¥–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É
        title_cell.alignment = Alignment(horizontal=ALIGN_CENTER)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.fill = PatternFill(start_color=COLOR_LIGHT_BLUE, end_color=COLOR_LIGHT_BLUE, fill_type="solid")

        # –î–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title_cell.border = Border(left=Side(style=BORDER_STYLE_MEDIUM), right=Side(style=BORDER_STYLE_MEDIUM),
            top=Side(style=BORDER_STYLE_MEDIUM), bottom=Side(style=BORDER_STYLE_MEDIUM))

        # –¥–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–ª–æ–Ω–æ–∫ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã
        for i in range(9):
            column_cell = worksheet.cell(row=2, column=i + 1)
            column_cell.alignment = Alignment(horizontal=ALIGN_CENTER)
            column_cell.border = Border(left=Side(style=BORDER_STYLE_THIN), right=Side(style=BORDER_STYLE_THIN),
                bottom=Side(style=BORDER_STYLE_THIN))

    return excel_path


async def categories_work_excel_report(
        jobtypes: List[Jobtype],
        start_date: datetime.datetime,
        end_date: datetime.datetime,
        report_type: str,
        lang: str,
        session: Any) -> str:

    """–û—Ç—á–µ—Ç –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º —Ä–∞–±–æ—Ç"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç
    os.makedirs("reports", exist_ok=True)

    # –¶–≤–µ—Ç–∞
    COLOR_DARK_BLUE = "203764"  # –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ç–µ–∫—Å—Ç
    COLOR_LIGHT_BLUE = "D9E1F2"  # –°–≤–µ—Ç–ª–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
    COLOR_LIGHT_GREEN = "E2EFDA"  # –°–≤–µ—Ç–ª–æ-–∑–µ–ª–µ–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_YELLOW = "FFF2CC"  # –°–≤–µ—Ç–ª–æ-–∂–µ–ª—Ç—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_RED = "FFCCCC"  # –°–≤–µ—Ç–ª–æ-–∫—Ä–∞—Å–Ω—ã–π —Ñ–æ–Ω
    COLOR_LIGHT_GRAY = "F2F2F2"  # –°–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    COLOR_WHITE = "FFFFFF"  # –ë–µ–ª—ã–π —Ñ–æ–Ω

    # –°—Ç–∏–ª–∏ –≥—Ä–∞–Ω–∏—Ü
    BORDER_STYLE_THIN = "thin"
    BORDER_STYLE_MEDIUM = "medium"

    # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ
    ALIGN_CENTER = "center"
    ALIGN_LEFT = "left"
    ALIGN_RIGHT = "right"

    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É Excel –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –æ—Ç—á–µ—Ç–∞
    start_date = convert_date_time(start_date, with_tz=True)[0]
    end_date = convert_date_time(end_date, with_tz=True)[0]
    excel_path = f"reports/{report_type}_{start_date}_{end_date}.xlsx"
    sheet_name = "work_categories_report"

    title = f"üìÜ {await t.t(report_type, lang)} {start_date} - {end_date}"

    data = []
    columns = [
        "ID",
        await t.t('excel_date', lang),
        await t.t('excel_transport', lang),
        await t.t('mechanic', lang),
        await t.t('location', lang),
        await t.t('works_time', lang),
        await t.t('excel_comment', lang),
        await t.t('excel_jobtype', lang),
        await t.t('excel_jobs', lang)
    ]
    data.append(columns)
